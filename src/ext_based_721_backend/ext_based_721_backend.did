type ApproveRequest = record {
  token : text;
  subaccount : opt vec nat8;
  allowance : nat;
  spender : principal;
};
type InitArgs = record {
  cap : opt principal;
  logo : opt text;
  name : opt text;
  custodians : opt vec principal;
  symbol : opt text;
};
type MintRequest = record { to : User; metadata : opt vec nat8 };
type NftError = variant {
  UnauthorizedOperator;
  SelfTransfer;
  TokenNotFound;
  UnauthorizedOwner;
  SelfApprove;
  OperatorNotFound;
  ExistedNFT;
  OwnerNotFound;
};
type Result = variant { Ok : nat; Err : NftError };
type TransferRequest = record {
  to : User;
  token : text;
  notify : bool;
  from : User;
  memo : vec nat8;
  subaccount : opt vec nat8;
  amount : nat;
};
type TransferResponse = variant { ok : nat; err : TransferResponseDetails };
type TransferResponseDetails = variant {
  CannotNotify : text;
  InsufficientBalance;
  InvalidToken : text;
  Rejected;
  Unauthorized : text;
  Other : text;
};
type User = variant { "principal" : principal; address : text };
service : (opt InitArgs) -> {
  approve : (ApproveRequest) -> (bool);
  burn : (nat) -> (Result);
  mintNFT : (MintRequest) -> (nat32);
  transfer : (TransferRequest) -> (TransferResponse);
}